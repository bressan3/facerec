#!/usr/bin/env python

import numpy as np
import argparse, cv2, sys, os, math, shutil
from PIL import Image

# CV compatibility stubs
if 'IMREAD_GRAYSCALE' not in dir(cv2):
    cv2.IMREAD_GRAYSCALE = 0L


# Profiles
PROFILES = {
    #'HAAR_FRONTALFACE_ALT2': '/usr/local/opt/opencv/share/OpenCV/haarcascades/haarcascade_frontalface_alt2.xml'
    'HAAR_FRONTALFACE_ALT2': '/usr/share/opencv/haarcascades/haarcascade_frontalface_alt2.xml'
}
CV2_FLAGS = cv2.cv.CV_HAAR_DO_CANNY_PRUNING | cv2.cv.CV_HAAR_FIND_BIGGEST_OBJECT

# Support functions
def error(msg):
    sys.stderr.write("{}: error: {}\n".format(os.path.basename(sys.argv[0]), msg))


def fatal(msg):
    error(msg)
    sys.exit(1)


def check_profiles():
    for k, v in PROFILES.iteritems():
        if not os.path.exists(v):
            fatal("cannot load {} from {}".format(k, v))


def ensure_subjects_directory():
    subjects_directory = os.path.join(os.curdir, "subjects")
    if not os.path.exists(subjects_directory):
        os.makedirs(subjects_directory)


def enroll(args):
    ensure_subjects_directory()
    directory = os.path.join(os.curdir, "subjects", args.subject)
    if not os.path.exists(directory):
        os.makedirs(directory)
    else:
        for the_file in os.listdir(directory):
            file_path = os.path.join(directory, the_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except OSError, e:
                fatal(e)

    faceCascade = cv2.CascadeClassifier(PROFILES['HAAR_FRONTALFACE_ALT2'])
    for image_path in args.files:
        if not os.path.exists(image_path):
            fatal("File not found: '{}'".format(image_path))
    face_number = 0
    for image_path in args.files:
        # Read the image and convert to grayscale
        image_pil = Image.open(image_path).convert('L')
        # Convert the image format into numpy array
        image = np.array(image_pil, 'uint8')
        # Detect the face in the image
        side = math.sqrt(image.size)
        minlen = int(side / 20)
        maxlen = int(side / 2)
        faces = faceCascade.detectMultiScale(image, 1.1, 4, CV2_FLAGS, (minlen, minlen), (maxlen, maxlen))
        # If face is detected, write the face image to the subject directory 
        if len(faces):
            (x, y, w, h) = faces[len(faces) - 1]
            face_number += 1
            face_path = os.path.join(directory, str(face_number) + ".jpg")
            cv2.imwrite(face_path, image[y: y + h, x: x + w])
            if args.debug:
                cv2.imshow(args.subject, image[y: y + h, x: x + w])
                cv2.waitKey(50)
    if face_number:
        print("Enrolled subject: '{}', number of faces: {}".format(args.subject, face_number))
    else:
        fatal("No faces detected for subject '{}'".format(args.subject))


def identify(args):
    print("identify")
    print(args)


def list(args):
    print("list")


def showall(args):
    print("showall")


def show(args):
    print("show")


def check(args):
    print("check")


def delete(args):
    ensure_subjects_directory()
    directory = os.path.join(os.curdir, "subjects", args.subject)
    if os.path.exists(directory):
        for the_file in os.listdir(directory):
            file_path = os.path.join(directory, the_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except OSError, e:
                fatal(e)
        try:
            os.removedirs(directory)
        except OSError, e:
            fatal(e)
        print("Subject '{}' deleted".format(args.subject))
    else:
        print("No entry found")


def __main__():
    parser = argparse.ArgumentParser(description='A simple face recognizer')
    subparsers = parser.add_subparsers()

    parser_enroll = subparsers.add_parser('enroll', help='Enroll a new subject or update images of existing subject')
    parser_enroll.add_argument('--subject', '-s', help="subject code (name or identifier)", required=True)
    parser_enroll.add_argument('files', type=str, nargs='+', help='paths to image files')
    parser_enroll.add_argument('--debug', '-d', action="store_true", help='show faces of subjects')
    parser_enroll.set_defaults(func=enroll)

    parser_identify = subparsers.add_parser('identify', help='Get the identification of a subject given image of him')
    parser_identify.add_argument('file', help='path to image file')
    parser_identify.set_defaults(func=identify)

    parser_list = subparsers.add_parser('list', help='Get the codes of all enrolled subjects')
    parser_list.set_defaults(func=list)

    parser_showall = subparsers.add_parser('showall', help='Show faces of all enrolled subjects')
    parser_showall.set_defaults(func=showall)

    parser_show = subparsers.add_parser('show', help='Show face of one enrolled subject')
    parser_show.add_argument('--subject', '-s', help="subject code (name or identifier)", required=True)
    parser_show.set_defaults(func=show)

    parser_check = subparsers.add_parser('check', help='Check if the subject with given code is entered')
    parser_check.add_argument('--subject', '-s', help="subject code (name or identifier)", required=True)
    parser_check.set_defaults(func=check)

    parser_delete = subparsers.add_parser('delete', help='Delete a subject by subject code')
    parser_delete.add_argument('--subject', '-s', help="Subject code (name or identifier)", required=True)
    parser_delete.set_defaults(func=delete)

    args = parser.parse_args()
    check_profiles()
    args.func(args)

    return 0


if __name__ == '__main__':
    sys.exit(__main__())
